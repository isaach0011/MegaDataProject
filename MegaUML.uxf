<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <help_text>// Uncomment the following line to change the fontsize and font:
// fontsize=14
//fontfamily=SansSerif //possible: SansSerif,Serif,Monospaced


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Cmd to select multiple elements
// Use Cmd+mouse to select via lasso
//
// Use +/- or Cmd+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Cmd+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>9</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2268</x>
      <y>198</y>
      <w>288</w>
      <h>117</h>
    </coordinates>
    <panel_attributes>Timer
--
- executionTime : clock_t
--
+startTimer()
+stopTimer()
+resetTimer()
+displaytTimerInformation()
+getExecutionTimeInMicroseconds()
bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1467</x>
      <y>117</y>
      <w>342</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>IntNode
--
- nodeData : int
- nodePointer : IntNode *
--
+ getNodeData() : int
+ getNodePointer() : IntNode *
+ setNodeData(int value) : void
+ setNodePointer(IntNode * next) : void

+ IntNode() : constructor
+ IntNode(int value) : init
+ IntNode(int value, IntNode * nextNode) : init 


bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1431</x>
      <y>0</y>
      <w>234</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>Created by Isaac Hill
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1899</x>
      <y>126</y>
      <w>306</w>
      <h>135</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- size : int
- front : IntNode *

--
+ IntNodeArray(int size) : constructor
+ setAtIndex(int index, int value) : void
+ getFromIndex(int index) : int
+ getSize() : int
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1458</x>
      <y>396</y>
      <w>405</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
Data Members
- nodeData : Type
- nodePointer : Node&lt;Type&gt; *
--
Constructors
+ Node() : constructor
+ Node(Type value) : constructor
+ Node(Type data, Node&lt;Type&gt; * pointer) : constructor

Methods
+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt; *
+ setNodeData(Type data) : void
+ setNodePointer(Node&lt;Type&gt; * next) : void

bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>1431</x>
      <y>54</y>
      <w>810</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>IntNode
--
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1800</x>
      <y>198</y>
      <w>117</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>110.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1926</x>
      <y>387</y>
      <w>468</w>
      <h>297</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
Data Members

- front : Node&lt;Type&gt; * 
- size : int
--
Constructors
+ Array() : constructor
+ Array(int size) : constructor

Methods

+ ~Array&lt;Type&gt;() : destrucotr
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied : copy constructor

+ getSize() const : int
+ getFront() const : Node&lt;Type&gt; * 

+ setAtIndex(int index, Type value) : void
+ getFrome Index(int index) : Type
bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1854</x>
      <y>522</y>
      <w>90</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1989</x>
      <y>693</y>
      <w>405</w>
      <h>252</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *
--
+ List&lt;Type&gt;() : constructor
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : deconstructor

+ addAtIndex(int index, Type value) : void
+ addFront(Type value) : void
+ addEnd(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const : int
+ getFront() const : Node&lt;Type&gt; *
bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1854</x>
      <y>585</y>
      <w>153</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>150.0;220.0;70.0;220.0;70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1458</x>
      <y>693</y>
      <w>441</w>
      <h>234</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : Type
- previous : BiDirectionalNode&lt;Type&gt; *
- next : BiDirectionalNode&lt;Type&gt; *
--
+ BiDirectionalNode() : constructor
+ BiDirectionalNode(Type data) : constructor
+ BiDirectionalNode(Type data, BiDirectionalNode&lt;Type&gt; * previous,
                                BiDirectionalNode&lt;Type&gt; * next) : constructor

+ getNodeData() : Type
+ setNodeData(Type data) : void
+ getPreviousNode() : BiDirectionalNode&lt;Type&gt; *
+ getNextNode() : BiDirectionalNode&lt;Type&gt; *
+ setPreviousNode(BiDirectionNode&lt;Type&gt; * previous) : void
+ setNextNode(BiDirectionNode&lt;Type&gt; * next) : void
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1656</x>
      <y>603</y>
      <w>27</w>
      <h>117</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1458</x>
      <y>990</y>
      <w>306</w>
      <h>198</h>
    </coordinates>
    <panel_attributes>DoublyLinkedlist&lt;Type&gt;
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
Non virtual methods
+ getSize() const : int
+ getFront() const : BiDirectionalNode&lt;Type&gt; * 
+ getEnd() const : BiDirecitonalNode&lt;Type&gt; *

Virtual methods
+ add(Type value)
+ remove(int)
bg=yellow
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1449</x>
      <y>1233</y>
      <w>288</w>
      <h>207</h>
    </coordinates>
    <panel_attributes>Queue
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ Queue() : constructor
+ ~Queue() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ enqueue(Type data) : void
+ dequeue() : Type
+ peek() : Type
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1782</x>
      <y>1233</y>
      <w>288</w>
      <h>207</h>
    </coordinates>
    <panel_attributes>Stack
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ Stack() : constructor
+ ~Stack() : destructor

+ push(Type data) : void
+ pop() : Type
+ peek() : Type

+ add(Type data) : void
+ remove(int index) : Type
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2106</x>
      <y>1233</y>
      <w>279</w>
      <h>207</h>
    </coordinates>
    <panel_attributes>CircularlyLinkedList
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ CircularList() : constructor
+ ~CircularList() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ addAtIndex(int index, Type data) : void
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1755</x>
      <y>1179</y>
      <w>495</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;530.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1485</x>
      <y>1179</y>
      <w>27</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1755</x>
      <y>1179</y>
      <w>153</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;150.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1593</x>
      <y>918</y>
      <w>108</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;40.0;80.0;40.0;80.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>909</x>
      <y>342</y>
      <w>1539</w>
      <h>1143</h>
    </coordinates>
    <panel_attributes>Stuff To Hold Stuff
--
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2106</x>
      <y>963</y>
      <w>279</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>Model :: DoubleList&lt;Type&gt;
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ DoubleLIst() : constructor
+ ~DoubleLIst() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ addFront(Type data) : void
+ addEnd(Type data) : void
+ addAtIndex(int index, Type data) : void
+ addAtIndexFast(int index, Type value) : void
layer=1
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1755</x>
      <y>1062</y>
      <w>369</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;390.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>927</x>
      <y>396</y>
      <w>423</w>
      <h>252</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
--
- NodeData : Type (inherited)
- rootPointer : BinarySearchTreeNode&lt;Type&gt; *
- leftChildPointer : BinarySearchTreeNode&lt;Type&gt; *
- rightChildPointer : BinarySearchTreeNode&lt;Type&gt; *
--

+ BinarySearchTreeNode() : constructor
+ BinarySearchTreeNode(Type data) : constructor

+ getRootPointer() : BinarySearchTreeNode&lt;Type&gt; *
+ getLeftChildPoitner() : BinarySearchTreeNode&lt;Type&gt; *
+ getRightChildPointer() : BinarySearchTreeNode&lt;Type&gt; *

+ setRootChildPointer(BinarySearchTreeNode&lt;Type&gt; * root) : void
+ setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt; * left) : void
+ setRihtChildPolinter(BinarySearchTreeNode&lt;Type&gt; * right) : void
layer=1
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1341</x>
      <y>513</y>
      <w>135</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>130.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>927</x>
      <y>702</y>
      <w>468</w>
      <h>378</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree&lt;Type&gt;
--
- root : BiinarYsearchTreeNode&lt;Type&gt; *
- size : int (inherited)
- height : int (inherited)
- complete : bool (inherited)
- balanced : bool (inherited)
--
+ BinarySearchTree() : constructor
+ ~BinarySearchTree() : destructor

+ getRoot() : BInarySearchTreeNode&lt;Type&gt; *
+ setRoot(BinarySearchTreeNode&lt;Type&gt; * root) : void

- calculateSize(BinarySerachTreeNode&lt;TYpe&gt; *) : int

- inOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
- preOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
- postOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void

+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void

+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void
layer=1
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>927</x>
      <y>1152</y>
      <w>333</w>
      <h>261</h>
    </coordinates>
    <panel_attributes>/Model :: Tree&lt;Type&gt;/
--

*Informational Methods*
+getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ isBalanced() : bool

*Traversals*
+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void

*Data Operations*
+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void
layer=1
bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1089</x>
      <y>1071</y>
      <w>27</w>
      <h>99</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;90.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1125</x>
      <y>639</y>
      <w>45</w>
      <h>81</h>
    </coordinates>
    <panel_attributes>m2= 0..n
lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>369</x>
      <y>396</y>
      <w>459</w>
      <h>252</h>
    </coordinates>
    <panel_attributes>HashTable
--
long capacity;
long size;
double efficiencyPercentage;
HashNode&lt;Type&gt; ** hashTableStorage;
bool isPrime(long sampleNumber);
void resize();
long nextPrime();
long findPosition(HashNode&lt;Type&gt; * data);
long handleCollision(HashNode&lt;Type&gt; * data, long currentPosition);
--
HashTable();
~HashTable();
void add(Type data);
bool remove(Type data);
void displayContents();
long getSize();
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>369</x>
      <y>684</y>
      <w>459</w>
      <h>315</h>
    </coordinates>
    <panel_attributes>Graph
--
static const int MAXIMUM = 20;
bool adjacencyMatrix [MAXIMUM][MAXIMUM];
Type graphData[MAXIMUM];
int vertexCount;
void depthFirstTraversal(Graph&lt;Type&gt; graph, int vertex, bool markedVertices[]);
--
Graph();
~Graph();
    
void addVertex(const Type&amp; value);
void addEdge(int source, int target);
void removeEdge(int source, int target);
Type&amp; operator [] (int vertex);
Type operator [] (int vertex) const;
int size() const;
bool areConnected(int source, int target) const;
bool hasUndirectedConnection(int source, int target) const;
std::set&lt;int&gt; neighbors(int vertex) const;
void depthFirstTraversal(Graph&lt;Type&gt; graph, int vertex);
void breadthFirstTraversal(Graph&lt;Type&gt; graph, int vertex);
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
