<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <help_text>// Uncomment the following line to change the fontsize and font:
// fontsize=14
//fontfamily=SansSerif //possible: SansSerif,Serif,Monospaced


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Cmd to select multiple elements
// Use Cmd+mouse to select via lasso
//
// Use +/- or Cmd+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Cmd+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>4</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>940</x>
      <y>96</y>
      <w>128</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>Timer
--
- executionTime : clock_t
--
+startTimer()
+stopTimer()
+resetTimer()
+displaytTimerInformation()
+getExecutionTimeInMicroseconds()
bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>584</x>
      <y>60</y>
      <w>152</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>IntNode
--
- nodeData : int
- nodePointer : IntNode *
--
+ getNodeData() : int
+ getNodePointer() : IntNode *
+ setNodeData(int value) : void
+ setNodePointer(IntNode * next) : void

+ IntNode() : constructor
+ IntNode(int value) : init
+ IntNode(int value, IntNode * nextNode) : init 


bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>568</x>
      <y>8</y>
      <w>104</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>Created by Isaac Hill
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>776</x>
      <y>64</y>
      <w>136</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- size : int
- front : IntNode *

--
+ IntNodeArray(int size) : constructor
+ setAtIndex(int index, int value) : void
+ getFromIndex(int index) : int
+ getSize() : int
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>716</x>
      <y>384</y>
      <w>180</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
Data Members
- nodeData : Type
- nodePointer : Node&lt;Type&gt; *
--
Constructors
+ Node() : constructor
+ Node(Type value) : constructor
+ Node(Type data, Node&lt;Type&gt; * pointer) : constructor

Methods
+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt; *
+ setNodeData(Type data) : void
+ setNodePointer(Node&lt;Type&gt; * next) : void

bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>568</x>
      <y>32</y>
      <w>360</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>IntNode
--
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>732</x>
      <y>96</y>
      <w>52</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>110.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>924</x>
      <y>380</y>
      <w>208</w>
      <h>132</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
Data Members

- front : Node&lt;Type&gt; * 
- size : int
--
Constructors
+ Array() : constructor
+ Array(int size) : constructor

Methods

+ ~Array&lt;Type&gt;() : destrucotr
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied : copy constructor

+ getSize() const : int
+ getFront() const : Node&lt;Type&gt; * 

+ setAtIndex(int index, Type value) : void
+ getFrome Index(int index) : Type
bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>892</x>
      <y>440</y>
      <w>40</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>952</x>
      <y>516</y>
      <w>180</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *
--
+ List&lt;Type&gt;() : constructor
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : deconstructor

+ addAtIndex(int index, Type value) : void
+ addFront(Type value) : void
+ addEnd(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const : int
+ getFront() const : Node&lt;Type&gt; *
bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>892</x>
      <y>468</y>
      <w>68</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>150.0;220.0;70.0;220.0;70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>716</x>
      <y>516</y>
      <w>196</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : Type
- previous : BiDirectionalNode&lt;Type&gt; *
- next : BiDirectionalNode&lt;Type&gt; *
--
+ BiDirectionalNode() : constructor
+ BiDirectionalNode(Type data) : constructor
+ BiDirectionalNode(Type data, BiDirectionalNode&lt;Type&gt; * previous,
                                BiDirectionalNode&lt;Type&gt; * next) : constructor

+ getNodeData() : Type
+ setNodeData(Type data) : void
+ getPreviousNode() : BiDirectionalNode&lt;Type&gt; *
+ getNextNode() : BiDirectionalNode&lt;Type&gt; *
+ setPreviousNode(BiDirectionNode&lt;Type&gt; * previous) : void
+ setNextNode(BiDirectionNode&lt;Type&gt; * next) : void
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>804</x>
      <y>476</y>
      <w>12</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>716</x>
      <y>648</y>
      <w>136</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>DoublyLinkedlist&lt;Type&gt;
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
Non virtual methods
+ getSize() const : int
+ getFront() const : BiDirectionalNode&lt;Type&gt; * 
+ getEnd() const : BiDirecitonalNode&lt;Type&gt; *

Virtual methods
+ add(Type value)
+ remove(int)
bg=yellow
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>712</x>
      <y>756</y>
      <w>128</w>
      <h>92</h>
    </coordinates>
    <panel_attributes>Queue
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ Queue() : constructor
+ ~Queue() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ enqueue(Type data) : void
+ dequeue() : Type
+ peek() : Type
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>860</x>
      <y>756</y>
      <w>128</w>
      <h>92</h>
    </coordinates>
    <panel_attributes>Stack
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ Stack() : constructor
+ ~Stack() : destructor

+ push(Type data) : void
+ pop() : Type
+ peek() : Type

+ add(Type data) : void
+ remove(int index) : Type
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1004</x>
      <y>756</y>
      <w>124</w>
      <h>92</h>
    </coordinates>
    <panel_attributes>CircularlyLinkedList
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ CircularList() : constructor
+ ~CircularList() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ addAtIndex(int index, Type data) : void
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>848</x>
      <y>732</y>
      <w>220</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;530.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>728</x>
      <y>732</y>
      <w>12</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>848</x>
      <y>732</y>
      <w>68</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;150.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>776</x>
      <y>616</y>
      <w>48</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;40.0;80.0;40.0;80.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>184</x>
      <y>156</y>
      <w>972</w>
      <h>712</h>
    </coordinates>
    <panel_attributes>Stuff To Hold Stuff
--
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1004</x>
      <y>636</y>
      <w>124</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>Model :: DoubleList&lt;Type&gt;
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ DoubleLIst() : constructor
+ ~DoubleLIst() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ addFront(Type data) : void
+ addEnd(Type data) : void
+ addAtIndex(int index, Type data) : void
+ addAtIndexFast(int index, Type value) : void
layer=1
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>848</x>
      <y>680</y>
      <w>164</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;390.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>480</x>
      <y>384</y>
      <w>188</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
--
- NodeData : Type (inherited)
- rootPointer : BinarySearchTreeNode&lt;Type&gt; *
- leftChildPointer : BinarySearchTreeNode&lt;Type&gt; *
- rightChildPointer : BinarySearchTreeNode&lt;Type&gt; *
--

+ BinarySearchTreeNode() : constructor
+ BinarySearchTreeNode(Type data) : constructor

+ getRootPointer() : BinarySearchTreeNode&lt;Type&gt; *
+ getLeftChildPoitner() : BinarySearchTreeNode&lt;Type&gt; *
+ getRightChildPointer() : BinarySearchTreeNode&lt;Type&gt; *

+ setRootChildPointer(BinarySearchTreeNode&lt;Type&gt; * root) : void
+ setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt; * left) : void
+ setRihtChildPolinter(BinarySearchTreeNode&lt;Type&gt; * right) : void
layer=1
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>664</x>
      <y>436</y>
      <w>60</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>130.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>480</x>
      <y>520</y>
      <w>208</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree&lt;Type&gt;
--
- root : BiinarYsearchTreeNode&lt;Type&gt; *
- size : int (inherited)
- height : int (inherited)
- complete : bool (inherited)
- balanced : bool (inherited)
--
+ BinarySearchTree() : constructor
+ ~BinarySearchTree() : destructor

+ getRoot() : BInarySearchTreeNode&lt;Type&gt; *
+ setRoot(BinarySearchTreeNode&lt;Type&gt; * root) : void

- calculateSize(BinarySerachTreeNode&lt;TYpe&gt; *) : int

- inOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
- preOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
- postOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void

+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void

+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void
layer=1
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>480</x>
      <y>720</y>
      <w>148</w>
      <h>116</h>
    </coordinates>
    <panel_attributes>/Model :: Tree&lt;Type&gt;/
--

*Informational Methods*
+getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ isBalanced() : bool

*Traversals*
+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void

*Data Operations*
+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void
layer=1
bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>552</x>
      <y>684</y>
      <w>12</w>
      <h>44</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;90.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>568</x>
      <y>492</y>
      <w>20</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>m2= 0..n
lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>480</x>
      <y>248</y>
      <w>208</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>HashTable
--
long capacity;
long size;
double efficiencyPercentage;
HashNode&lt;Type&gt; ** hashTableStorage;
bool isPrime(long sampleNumber);
void resize();
long nextPrime();
long findPosition(HashNode&lt;Type&gt; * data);
long handleCollision(HashNode&lt;Type&gt; * data, long currentPosition);
--
HashTable();
~HashTable();
void add(Type data);
bool remove(Type data);
void displayContents();
long getSize();
bg=green
layer=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>928</x>
      <y>212</y>
      <w>204</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>Graph
--
static const int MAXIMUM = 20;
bool adjacencyMatrix [MAXIMUM][MAXIMUM];
Type graphData[MAXIMUM];
int vertexCount;
void depthFirstTraversal(Graph&lt;Type&gt; graph, int vertex, bool markedVertices[]);
--
Graph();
~Graph();
    
void addVertex(const Type&amp; value);
void addEdge(int source, int target);
void removeEdge(int source, int target);
Type&amp; operator [] (int vertex);
Type operator [] (int vertex) const;
int size() const;
bool areConnected(int source, int target) const;
bool hasUndirectedConnection(int source, int target) const;
std::set&lt;int&gt; neighbors(int vertex) const;
void depthFirstTraversal(Graph&lt;Type&gt; graph, int vertex);
void breadthFirstTraversal(Graph&lt;Type&gt; graph, int vertex);
bg=pink
layer=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>724</x>
      <y>268</y>
      <w>160</w>
      <h>68</h>
    </coordinates>
    <panel_attributes>HashNode
--
Type data;
long key;
--
HashNode();
HashNode(Type data);
    
Type getData();
long getKey() const;
void setData(Type data);
bg=gray
layer=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>804</x>
      <y>332</y>
      <w>12</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;130.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>684</x>
      <y>296</y>
      <w>48</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;100.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>188</x>
      <y>524</y>
      <w>256</w>
      <h>152</h>
    </coordinates>
    <panel_attributes>AVLTree
--

BinarySearchTreeNode&lt;Type&gt; * leftRotation (BinarySearchTreeNode&lt;Type&gt; * partent);
BinarySearchTreeNode&lt;Type&gt; * rightRotation (BinarySearchTreeNode&lt;Type&gt; * parent);
BinarySearchTreeNode&lt;Type&gt; * leftRightRotation (BinarySearchTreeNode&lt;Type&gt; * parent);
BinarySearchTreeNode&lt;Type&gt; * rightLeftRotation (BinarySearchTreeNode&lt;Type&gt; * parent);
    
BinarySearchTreeNode&lt;Type&gt; * balanceSubTree (BinarySearchTreeNode&lt;Type&gt; * parent);
    
BinarySearchTreeNode&lt;Type&gt; * insertNode (BinarySearchTreeNode&lt;Type&gt; * parent);
BinarySearchTreeNode&lt;Type&gt; * removeNode(BinarySearchTreeNode&lt;Type&gt; * parent);
    
int heightDifference(BinarySearchTreeNode&lt;Type&gt; * parent);
    
--
AVLTree();
~AVLTree();
    
void insert(Type itemToInsert);
void remove(Type value);
layer=1
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>440</x>
      <y>600</y>
      <w>48</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>100.0;10.0;10.0;10.0</additional_attributes>
  </element>
</diagram>
